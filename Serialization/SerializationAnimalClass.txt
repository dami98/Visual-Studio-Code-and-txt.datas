// adds some important usings to use Serialization

using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;


//if you wanna Serialize a class add [Serializable()]
[Serializable()]
    public class Animal :ISerializable  // Serializable interface need to implement some methods
    {
        public string Name { get; set; }			//
        public double Weight { get; set; }			// classic get/set data for classes
        public double Height { get; set; }			//		Shortcut: prop + tabulator + tabulator;
        public int AnimalID { get; set; }			//

        public Animal() { } 						// classic constructor 	Shortcut: ctor + tabulator + tabulator

        public Animal(string name = "No Name",									
            double weight = 0,								
            double height = 0)						//		
        {											//	Set Name/Weight/Height via creating new Animal
            Name = name;							//		Animal Hund = new Animal("Bono",20,32);
            Weight = weight;						//
            Height = height;
        }

        public override string ToString()
        {																		//
            return string.Format("{0} weighs {1} lbs and is {2} inches tall",	//overrides the toString Method to get uniqe fromat
				Name, Weight, Height);											//
        }	
		

        // Serialization function (Stores Object Data in File)
        // SerializationInfo holds the key value pairs
        // StreamingContext can hold additional info
        // but we aren't using it here
		
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            // Assign key value pair for your data
            info.AddValue("Name", Name);
            info.AddValue("Weight", Weight);
            info.AddValue("Height", Height);
            info.AddValue("AnimalID", AnimalID);
        }

		
        // The deserialize function (Removes Object Data from File)
		
        public Animal(SerializationInfo info, StreamingContext ctxt)
        {
            //Get the values from info and assign them to the properties
            Name = (string)info.GetValue("Name", typeof(string));
            Weight = (double)info.GetValue("Weight", typeof(double));
            Height = (double)info.GetValue("Height", typeof(double));
            AnimalID = (int)info.GetValue("AnimalID", typeof(int));
        }
    }